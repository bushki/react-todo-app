{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","getStyle","backgroundColor","padding","borderBottom","textDecoration","props","todo","completed","inherits","createClass","key","value","_this$props$todo","id","title","react_default","a","createElement","style","type","onChange","markCompleteOnTodos","bind","onClick","deleteTodo","btnStyle","Component","background","color","border","borderRadius","cursor","float","Todos","todos","map","components_TodoItem","markCompleteOnApp","headerStyle","textAlign","linkStyle","Header","Link","to","AddTodo","state","e","setState","defineProperty","target","name","onSubmit","preventDefault","addTodo","display","flex","placeholder","className","About","Fragment","App","markComplete","console","log","axios","delete","then","res","toConsumableArray","filter","post","data","_this2","get","_this3","BrowserRouter","layout_Header","Route","exact","path","render","components_AddTodo","components_Todos","component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.89e0f7b7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n  getStyle = function() {\r\n    return {\r\n      backgroundColor: '#f4f4f4',\r\n      padding: '10px',\r\n      borderBottom: '1px #ccc dotted',\r\n      textDecoration: this.props.todo.completed ? \r\n      'line-through' : 'none'\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { id, title } = this.props.todo;\r\n    return (\r\n      <div style={this.getStyle()}>\r\n        <p>\r\n          <input type=\"checkbox\" \r\n          onChange={this.props.markCompleteOnTodos.bind(this, id)} /> {' '}\r\n          {title}\r\n          <button onClick={this.props.deleteTodo.bind(this, id)} style={btnStyle}>X</button>\r\n          </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  markCompleteOnTodos: PropTypes.func.isRequired,\r\n  deleteTodo: PropTypes.func.isRequired\r\n}\r\n\r\nconst btnStyle = {\r\n  background: '#ff0000',\r\n  color: '#fff',\r\n  border: 'none',\r\n  padding: '5px 9px',\r\n  borderRadius: '50%',\r\n  cursor: 'pointer',\r\n  float: 'right'\r\n}\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n\r\n\r\n  render() {\r\n    return  this.props.todos.map( (todo) => (\r\n        <TodoItem key={todo.id} \r\n        todo={todo} \r\n        deleteTodo={this.props.deleteTodo}\r\n        markCompleteOnTodos={this.props.markCompleteOnApp}></TodoItem>\r\n    ));\r\n  }\r\n}\r\n\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  markCompleteOnApp: PropTypes.func.isRequired,\r\n  deleteTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Todos;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyle}> \r\n            <h1>Todo List</h1>\r\n            <Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\nconst linkStyle = {\r\n    color: '#fff',\r\n    textDecoration: 'none'\r\n}\r\nexport default Header;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class AddTodo extends Component {\r\n  state = {\r\n    title: ''\r\n  }\r\n\r\n  //you can use [e.target.name] as long as the input field name matches the \r\n  //state property name\r\n  onChange = (e) => this.setState({[e.target.name]: e.target.value});\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state.title)\r\n    this.setState({\r\n      title: ''\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n        <form onSubmit={this.onSubmit} style={{ display: 'flex'}}>\r\n            <input \r\n            type=\"text\" \r\n            name=\"title\" \r\n            style={{ flex: '10', padding: '5px'}}\r\n            placeholder=\"Add Todo\"\r\n            value={this.state.title}\r\n            onChange={this.onChange}\r\n            />\r\n            <input type=\"submit\"\r\n              value=\"Submit\"\r\n              className=\"btn\"\r\n              style={{flex: '1'}}\r\n            />\r\n        </form>\r\n    )\r\n  }\r\n}\r\n\r\nAddTodo.propTypes = {\r\n  addTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n  return (\r\n    <React.Fragment>\r\n      <h1>About</h1>\r\n      <p>Todo App v1.0.0</p>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\r\n\r\nimport Todos from './components/Todos'\r\nimport Header from './components/layout/Header'\r\nimport AddTodo from './components/AddTodo'\r\nimport About from './components/pages/About'\r\n//import uuid from 'uuid';\r\nimport axios from 'axios';\r\n\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    todos: []\r\n }\r\n\r\n componentDidMount() {\r\n   axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\r\n   .then(res => this.setState({todos: res.data}));\r\n }\r\n\r\n markComplete = (id) => {\r\n  console.log('inside App');\r\n  this.setState({ todos: this.state.todos.map(todo => {\r\n    if(todo.id === id) {\r\n      todo.completed = !todo.completed;\r\n    }\r\n    return todo;\r\n  }) })\r\n }\r\n\r\n deleteTodo = (id) => {\r\n   console.log('hello from App.deleteTodo');\r\n\r\n   axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\r\n   .then(res => this.setState({todos: [...this.state.todos.filter(todo => \r\n    todo.id !== id)]}))\r\n }\r\n\r\n addTodo = (title) => {\r\n   axios.post('https://jsonplaceholder.typicode.com/todos', {\r\n     title: title,\r\n     completed: false\r\n   })\r\n   .then(res => this.setState({todos: [...this.state.todos, res.data] }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n          <div className=\"container\">\r\n              <Header/>\r\n              <Route exact path=\"/\" render={props => (\r\n                <React.Fragment>\r\n                  <AddTodo addTodo={this.addTodo} />\r\n                  <Todos todos={this.state.todos}\r\n                  deleteTodo={this.deleteTodo}\r\n                  markCompleteOnApp={this.markComplete}>\r\n              </Todos>\r\n                </React.Fragment>\r\n              )} />\r\n              <Route path=\"/about\" component={About}\r\n              />\r\n\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root')); //PWA and offline content\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}